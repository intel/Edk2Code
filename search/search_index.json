{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EDK2Code Star The EDK2Code Extension for Visual Studio Code enhances the development experience for engineers working with the EDK2 (UEFI) codebase by providing features such as syntax highlighting, code navigation, and error detection. This extension integrates these capabilities directly into Visual Studio Code, enabling developers to streamline their workflow and increase productivity. By leveraging the EDK2Code extension, developers can easily navigate through code, quickly identify errors, and benefit from improved readability of EDK2 source files. This results in a more efficient development process and a smoother coding experience. Additionally, the extension supports various EDK2-specific commands accessible via the command palette, such as rebuilding the index database and configuring the workspace. This comprehensive toolset empowers developers to work more effectively with EDK2 projects, ultimately leading to higher quality code and faster development cycles. Check YouTube video presentation on UEFI Forum Channel","title":"Home"},{"location":"#edk2code","text":"Star The EDK2Code Extension for Visual Studio Code enhances the development experience for engineers working with the EDK2 (UEFI) codebase by providing features such as syntax highlighting, code navigation, and error detection. This extension integrates these capabilities directly into Visual Studio Code, enabling developers to streamline their workflow and increase productivity. By leveraging the EDK2Code extension, developers can easily navigate through code, quickly identify errors, and benefit from improved readability of EDK2 source files. This results in a more efficient development process and a smoother coding experience. Additionally, the extension supports various EDK2-specific commands accessible via the command palette, such as rebuilding the index database and configuring the workspace. This comprehensive toolset empowers developers to work more effectively with EDK2 projects, ultimately leading to higher quality code and faster development cycles. Check YouTube video presentation on UEFI Forum Channel","title":"EDK2Code"},{"location":"advance_features/","text":"Advanced Features Indexing Source Code The index in EDK2Code is created by analyzing the project's DSC files, using the build folder as a reference. This indexing process is essential for enabling the advanced features of the EDK2Code extension, which significantly enhance the development experience for EDK2 projects. The indexing process involves parsing the DSC (Driver, SMM, and UEFI) files, which are key configuration files in EDK2 projects, to build a comprehensive map of the code structure. The build folder is used as a reference during this process to gather all necessary compilation data, ensuring that the index accurately reflects the project's state. This index database allows the extension to offer various capabilities, such as: Fast Code Navigation : Quickly jump to definitions, references, and declarations within the codebase. Accurate Code Completion : Provide context-aware suggestions as you type, improving coding efficiency. Error Detection : Highlight potential issues in the code, such as syntax errors or undefined references. Enhanced Readability : Improve the readability of EDK2 source files through syntax highlighting and code outlining. Note Advance features require the index database. Rebuilding Index Database To leverage the full potential of the EDK2Code extension, it is essential to have an up-to-date index database. You can rebuild the index database whenever there are significant changes to the codebase that might affect the existing index. This process is initiated through the command palette in Visual Studio Code: > EDK2: Rebuild index database During this process, you will be prompted to select your build directory. The extension will then detect the compilations within this directory, allowing you to choose one or multiple compilations to be included in the index. Once the indexing is complete, the extension will update its database, enabling all the advanced features. Enabling Compile Information Enabling compile information is an optional but highly recommended step to fully utilize the capabilities of the EDK2Code extension. By providing detailed compile information, the extension can offer more accurate and context-aware features, enhancing your development workflow. Why Compile Information is Important Enhanced Code Navigation : With compile information, the extension can more precisely map the relationships between different parts of the code. This allows for faster and more accurate navigation, such as jumping to definitions and references. Improved Code Completion : Compile information enables the extension to offer more accurate and context-aware code suggestions as you type, which can significantly speed up coding and reduce errors. Accurate Error Detection : By understanding the compilation context, the extension can more effectively identify potential issues in the code, such as syntax errors or undefined references, and highlight them for the developer. Better Readability : Compile information helps the extension provide enhanced syntax highlighting and code outlining, making the code easier to read and understand. How to Enable Compile Information To enable compile information, you need to activate the build report feature in the EDK2 build process by setting the -Y COMPILE_INFO flag. This will generate detailed compile information that the EDK2Code extension can use. For example, if you want to build EmulatorPkg from the EDK2 source, your build command will look like this: build -p EmulatorPkg\\EmulatorPkg.dsc -t VS2019 -a IA32 -Y COMPILE_INFO -y BuildReport.log This command will generate compile information in your build folder, specifically in the CompileInfo directory: x:\\Edk2\\Build\\EmulatorIA32\\DEBUG_VS2019\\CompileInfo By enabling compile information, you ensure that the EDK2Code extension has access to all the necessary details about your project's compilation process, allowing it to provide the most accurate and useful features possible. DSC Analysis The DSC files are critical components of EDK2 projects, providing configurations and build instructions. Advanced DSC analysis is a powerful feature of the EDK2Code extension that helps developers understand and manage these configurations more effectively. The analysis involves parsing the DSC files to extract valuable information about the project's structure and dependencies. Reference Tree This feature shows how DSC files are included and referenced within the project. By visualizing the inclusion hierarchy, developers can easily understand the relationships between different DSC files and how they contribute to the overall project structure. This helps in managing complex configurations and ensuring that all necessary files are correctly referenced. Dim Unused Code: The extension can identify and dim unused code within the DSC files. This helps developers quickly spot and clean up any code that is not being utilized, leading to a more efficient and maintainable codebase. By highlighting unused sections, the extension ensures that developers focus only on the relevant and active parts of the configuration. Show definition Values Mouse hover over DSC definitions and PCD's can display the current values of definitions, providing developers with a clear understanding of the build environment and configurations used in the project. This makes it easier to debug configuration issues and verify that the correct settings are being applied. Error Detection The DSC analysis can identify potential issues within the DSC files, such incorrect paths, duplicated libraries, etc. These issues are highlighted and shown in the Visual Studio Code \"Problems\" window. Current support Section is empty Mixed section types are not allowed Unknown section type Syntax error Statement has no key Duplicate statement Undefined token space GUID Include path not found Nested packages are not allowed Duplicate declaration Duplicate include path Duplicate GUID Undefined library class Syntax error in path Duplicate include file Missing path Conditional block missform Unused symbol Empty file Inactive code Edk2Code unsupported Note You can disable this using the edk2code.enableDiagnostics setting Commands This commands are only accessible using the command palette F1 or Ctrl + Shift + P Open Module Shows a list of all modules compiled > EDK2: Open Module Open Library Shows a list of all libraries compiled > EDK2: Open Library Module Map You can right click on a compiled INF file and select EDK2: Show Module Map This will open the EDK2 submenu showing the libraries and source files that were used to compile that INF. This feature is helpful in visualizing how a module includes various libraries. It also provides insights into how C files within the module include header files. By understanding these relationships, developers can better manage dependencies. Show Reference Tree This option illustrates how DSC and INF files are included and referenced within the project. By visualizing this inclusion hierarchy, developers can gain a clearer understanding of the relationships between different DSC and INF files and how they contribute to the overall project structure. In EDK2 projects, this feature is particularly useful for managing complex configurations and ensuring that all necessary files are correctly referenced. It helps developers identify how modules and libraries are interconnected, which can be crucial for debugging and maintaining the project.","title":"Advanced Features"},{"location":"advance_features/#advanced-features","text":"","title":"Advanced Features"},{"location":"advance_features/#indexing-source-code","text":"The index in EDK2Code is created by analyzing the project's DSC files, using the build folder as a reference. This indexing process is essential for enabling the advanced features of the EDK2Code extension, which significantly enhance the development experience for EDK2 projects. The indexing process involves parsing the DSC (Driver, SMM, and UEFI) files, which are key configuration files in EDK2 projects, to build a comprehensive map of the code structure. The build folder is used as a reference during this process to gather all necessary compilation data, ensuring that the index accurately reflects the project's state. This index database allows the extension to offer various capabilities, such as: Fast Code Navigation : Quickly jump to definitions, references, and declarations within the codebase. Accurate Code Completion : Provide context-aware suggestions as you type, improving coding efficiency. Error Detection : Highlight potential issues in the code, such as syntax errors or undefined references. Enhanced Readability : Improve the readability of EDK2 source files through syntax highlighting and code outlining. Note Advance features require the index database.","title":"Indexing Source Code"},{"location":"advance_features/#rebuilding-index-database","text":"To leverage the full potential of the EDK2Code extension, it is essential to have an up-to-date index database. You can rebuild the index database whenever there are significant changes to the codebase that might affect the existing index. This process is initiated through the command palette in Visual Studio Code: > EDK2: Rebuild index database During this process, you will be prompted to select your build directory. The extension will then detect the compilations within this directory, allowing you to choose one or multiple compilations to be included in the index. Once the indexing is complete, the extension will update its database, enabling all the advanced features.","title":"Rebuilding Index Database"},{"location":"advance_features/#enabling-compile-information","text":"Enabling compile information is an optional but highly recommended step to fully utilize the capabilities of the EDK2Code extension. By providing detailed compile information, the extension can offer more accurate and context-aware features, enhancing your development workflow.","title":"Enabling Compile Information"},{"location":"advance_features/#why-compile-information-is-important","text":"Enhanced Code Navigation : With compile information, the extension can more precisely map the relationships between different parts of the code. This allows for faster and more accurate navigation, such as jumping to definitions and references. Improved Code Completion : Compile information enables the extension to offer more accurate and context-aware code suggestions as you type, which can significantly speed up coding and reduce errors. Accurate Error Detection : By understanding the compilation context, the extension can more effectively identify potential issues in the code, such as syntax errors or undefined references, and highlight them for the developer. Better Readability : Compile information helps the extension provide enhanced syntax highlighting and code outlining, making the code easier to read and understand.","title":"Why Compile Information is Important"},{"location":"advance_features/#how-to-enable-compile-information","text":"To enable compile information, you need to activate the build report feature in the EDK2 build process by setting the -Y COMPILE_INFO flag. This will generate detailed compile information that the EDK2Code extension can use. For example, if you want to build EmulatorPkg from the EDK2 source, your build command will look like this: build -p EmulatorPkg\\EmulatorPkg.dsc -t VS2019 -a IA32 -Y COMPILE_INFO -y BuildReport.log This command will generate compile information in your build folder, specifically in the CompileInfo directory: x:\\Edk2\\Build\\EmulatorIA32\\DEBUG_VS2019\\CompileInfo By enabling compile information, you ensure that the EDK2Code extension has access to all the necessary details about your project's compilation process, allowing it to provide the most accurate and useful features possible.","title":"How to Enable Compile Information"},{"location":"advance_features/#dsc-analysis","text":"The DSC files are critical components of EDK2 projects, providing configurations and build instructions. Advanced DSC analysis is a powerful feature of the EDK2Code extension that helps developers understand and manage these configurations more effectively. The analysis involves parsing the DSC files to extract valuable information about the project's structure and dependencies.","title":"DSC Analysis"},{"location":"advance_features/#reference-tree","text":"This feature shows how DSC files are included and referenced within the project. By visualizing the inclusion hierarchy, developers can easily understand the relationships between different DSC files and how they contribute to the overall project structure. This helps in managing complex configurations and ensuring that all necessary files are correctly referenced.","title":"Reference Tree"},{"location":"advance_features/#dim-unused-code","text":"The extension can identify and dim unused code within the DSC files. This helps developers quickly spot and clean up any code that is not being utilized, leading to a more efficient and maintainable codebase. By highlighting unused sections, the extension ensures that developers focus only on the relevant and active parts of the configuration.","title":"Dim Unused Code:"},{"location":"advance_features/#show-definition-values","text":"Mouse hover over DSC definitions and PCD's can display the current values of definitions, providing developers with a clear understanding of the build environment and configurations used in the project. This makes it easier to debug configuration issues and verify that the correct settings are being applied.","title":"Show definition Values"},{"location":"advance_features/#error-detection","text":"The DSC analysis can identify potential issues within the DSC files, such incorrect paths, duplicated libraries, etc. These issues are highlighted and shown in the Visual Studio Code \"Problems\" window. Current support Section is empty Mixed section types are not allowed Unknown section type Syntax error Statement has no key Duplicate statement Undefined token space GUID Include path not found Nested packages are not allowed Duplicate declaration Duplicate include path Duplicate GUID Undefined library class Syntax error in path Duplicate include file Missing path Conditional block missform Unused symbol Empty file Inactive code Edk2Code unsupported Note You can disable this using the edk2code.enableDiagnostics setting","title":"Error Detection"},{"location":"advance_features/#commands","text":"This commands are only accessible using the command palette F1 or Ctrl + Shift + P","title":"Commands"},{"location":"advance_features/#open-module","text":"Shows a list of all modules compiled > EDK2: Open Module","title":"Open Module"},{"location":"advance_features/#open-library","text":"Shows a list of all libraries compiled > EDK2: Open Library","title":"Open Library"},{"location":"advance_features/#module-map","text":"You can right click on a compiled INF file and select EDK2: Show Module Map This will open the EDK2 submenu showing the libraries and source files that were used to compile that INF. This feature is helpful in visualizing how a module includes various libraries. It also provides insights into how C files within the module include header files. By understanding these relationships, developers can better manage dependencies.","title":"Module Map"},{"location":"advance_features/#show-reference-tree","text":"This option illustrates how DSC and INF files are included and referenced within the project. By visualizing this inclusion hierarchy, developers can gain a clearer understanding of the relationships between different DSC and INF files and how they contribute to the overall project structure. In EDK2 projects, this feature is particularly useful for managing complex configurations and ensuring that all necessary files are correctly referenced. It helps developers identify how modules and libraries are interconnected, which can be crucial for debugging and maintaining the project.","title":"Show Reference Tree"},{"location":"getting_started/","text":"Getting Started Installation Requirements Visual Studio Code To get started with the EDK2Code extension, you first need to have Visual Studio Code installed on your system. You can download it from the official Visual Studio Code website . Ensure you have version ^1.77.0 or later to be compatible with the EDK2Code extension. Cscope Installation (Windows/Linux) Cscope is a required tool for some C-related functionalities of the EDK2Code extension. Windows : Cscope comes included with the EDK2Code extension, so no additional installation is needed. Linux : You need to install Cscope manually. For Ubuntu, you can install it using the following command: sudo apt install cscope Additionally, if you have a preferred installation path for Cscope, you can set it using the edk2code.cscopeOverwritePath setting in Visual Studio Code. Initial Setup Installing the Extension To install the EDK2Code extension: Open Visual Studio Code. Go to the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of the window or by pressing Ctrl+Shift+X . Search for EDK2Code . Click on the Install button next to the EDK2Code extension from Intel Corporation. Alternatively, you can manually install the extension using the .vsix file: Download the latest .vsix file from the EDK2Code releases page . Open Visual Studio Code. Go to the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of the window or by pressing Ctrl+Shift+X . Click on the three-dot menu in the upper right corner of the Extensions view and select Install from VSIX... . Browse to the location where you downloaded the .vsix file and select it to install the extension. Basic Functions The EDK2Code extension provides several basic functions to enhance the coding experience. These functionalities are inferred based on the source code without knowing the actual compilation arguments. However, once the build index is generated, the results of these actions should be accurate. Here is a table summarizing the key functions and the types of files that support each command: Function Supported File Types Syntax Highlight INF, DSC, DEC, VFR, ACPI Outline INF, DSC, DEC, VFR, ACPI Go to Definition INF, DSC, C Go to include DSC Go to INF C Tip To utilize the advanced features of the EDK2Code extension, you need to index the database. This indexing process enables capabilities such as fast code navigation, accurate code completion, and error detection. For more details, please refer to the Advanced Features section. Syntax Highlight Provides syntax highlighting for various EDK2 file types to improve readability and code comprehension. Outline Displays an outline tree for the supported file types, helping developers to navigate through the sections of the file easily. Go to Definition Allows you to right-click on a symbol (function, variable, etc.) and select Go to Definition (F12) to open the symbol definition. Example on INF file: Example on DSC file: Go to include Enables you to right-click within a DSC file and select Go to include to see if the DSC file was included ( !Include ) in another DSC file. Go to INF When working in a C file, you can right-click and select Go to INF to open the .inf file that compiled the C file. By leveraging these basic functions, the EDK2Code extension enhances navigation and readability, making the development process more efficient. User interface Status bar When you open a file in the editor, the status bar will display a warning if the file you are viewing has not been compiled. This feature helps you quickly identify whether the current file has been successfully compiled. As EDK2 projects usually contain different implementations of the same modules, this feature helps to identify files that are actually in use.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#installation-requirements","text":"","title":"Installation Requirements"},{"location":"getting_started/#visual-studio-code","text":"To get started with the EDK2Code extension, you first need to have Visual Studio Code installed on your system. You can download it from the official Visual Studio Code website . Ensure you have version ^1.77.0 or later to be compatible with the EDK2Code extension.","title":"Visual Studio Code"},{"location":"getting_started/#cscope-installation-windowslinux","text":"Cscope is a required tool for some C-related functionalities of the EDK2Code extension. Windows : Cscope comes included with the EDK2Code extension, so no additional installation is needed. Linux : You need to install Cscope manually. For Ubuntu, you can install it using the following command: sudo apt install cscope Additionally, if you have a preferred installation path for Cscope, you can set it using the edk2code.cscopeOverwritePath setting in Visual Studio Code.","title":"Cscope Installation (Windows/Linux)"},{"location":"getting_started/#initial-setup","text":"","title":"Initial Setup"},{"location":"getting_started/#installing-the-extension","text":"To install the EDK2Code extension: Open Visual Studio Code. Go to the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of the window or by pressing Ctrl+Shift+X . Search for EDK2Code . Click on the Install button next to the EDK2Code extension from Intel Corporation. Alternatively, you can manually install the extension using the .vsix file: Download the latest .vsix file from the EDK2Code releases page . Open Visual Studio Code. Go to the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of the window or by pressing Ctrl+Shift+X . Click on the three-dot menu in the upper right corner of the Extensions view and select Install from VSIX... . Browse to the location where you downloaded the .vsix file and select it to install the extension.","title":"Installing the Extension"},{"location":"getting_started/#basic-functions","text":"The EDK2Code extension provides several basic functions to enhance the coding experience. These functionalities are inferred based on the source code without knowing the actual compilation arguments. However, once the build index is generated, the results of these actions should be accurate. Here is a table summarizing the key functions and the types of files that support each command: Function Supported File Types Syntax Highlight INF, DSC, DEC, VFR, ACPI Outline INF, DSC, DEC, VFR, ACPI Go to Definition INF, DSC, C Go to include DSC Go to INF C Tip To utilize the advanced features of the EDK2Code extension, you need to index the database. This indexing process enables capabilities such as fast code navigation, accurate code completion, and error detection. For more details, please refer to the Advanced Features section.","title":"Basic Functions"},{"location":"getting_started/#syntax-highlight","text":"Provides syntax highlighting for various EDK2 file types to improve readability and code comprehension.","title":"Syntax Highlight"},{"location":"getting_started/#outline","text":"Displays an outline tree for the supported file types, helping developers to navigate through the sections of the file easily.","title":"Outline"},{"location":"getting_started/#go-to-definition","text":"Allows you to right-click on a symbol (function, variable, etc.) and select Go to Definition (F12) to open the symbol definition. Example on INF file: Example on DSC file:","title":"Go to Definition"},{"location":"getting_started/#go-to-include","text":"Enables you to right-click within a DSC file and select Go to include to see if the DSC file was included ( !Include ) in another DSC file.","title":"Go to include"},{"location":"getting_started/#go-to-inf","text":"When working in a C file, you can right-click and select Go to INF to open the .inf file that compiled the C file. By leveraging these basic functions, the EDK2Code extension enhances navigation and readability, making the development process more efficient.","title":"Go to INF"},{"location":"getting_started/#user-interface","text":"","title":"User interface"},{"location":"getting_started/#status-bar","text":"When you open a file in the editor, the status bar will display a warning if the file you are viewing has not been compiled. This feature helps you quickly identify whether the current file has been successfully compiled. As EDK2 projects usually contain different implementations of the same modules, this feature helps to identify files that are actually in use.","title":"Status bar"},{"location":"introduction/","text":"Introduction Overview of EDK2Code The EDK2Code Extension for Visual Studio Code is designed to enhance the development experience for engineers working with the EDK2 (UEFI) codebase. By providing advanced features such as syntax highlighting, code navigation, and error detection, the extension integrates these capabilities directly into Visual Studio Code. This allows developers to streamline their workflow and increase productivity. EDK2Code makes it easier for developers to navigate through the code, quickly identify errors, and benefit from improved readability of EDK2 source files. This results in a more efficient development process and a smoother coding experience. Key Features Syntax Highlighting : Provides syntax highlighting for various EDK2 file types (INF, DSC, DEC, VFR, ACPI). Code Navigation : Features like \"Go to Definition,\" \"Show Call Hierarchy,\" and \"Go to INF\" enhance code navigation. Error Detection : Detects and highlights errors in the code, improving code quality. Workspace Configuration : Automatically configures workspace settings based on indexed source code. Indexing Source Code : Allows indexing of source code to enable advanced features like auto-completion and definition lookup. Command Palette Integration : Provides EDK2-specific commands accessible via the command palette. Cscope Integration : Uses Cscope for better C definitions and navigation.","title":"Introduction"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"introduction/#overview-of-edk2code","text":"The EDK2Code Extension for Visual Studio Code is designed to enhance the development experience for engineers working with the EDK2 (UEFI) codebase. By providing advanced features such as syntax highlighting, code navigation, and error detection, the extension integrates these capabilities directly into Visual Studio Code. This allows developers to streamline their workflow and increase productivity. EDK2Code makes it easier for developers to navigate through the code, quickly identify errors, and benefit from improved readability of EDK2 source files. This results in a more efficient development process and a smoother coding experience.","title":"Overview of EDK2Code"},{"location":"introduction/#key-features","text":"Syntax Highlighting : Provides syntax highlighting for various EDK2 file types (INF, DSC, DEC, VFR, ACPI). Code Navigation : Features like \"Go to Definition,\" \"Show Call Hierarchy,\" and \"Go to INF\" enhance code navigation. Error Detection : Detects and highlights errors in the code, improving code quality. Workspace Configuration : Automatically configures workspace settings based on indexed source code. Indexing Source Code : Allows indexing of source code to enable advanced features like auto-completion and definition lookup. Command Palette Integration : Provides EDK2-specific commands accessible via the command palette. Cscope Integration : Uses Cscope for better C definitions and navigation.","title":"Key Features"},{"location":"settings/","text":"EDK2Code Settings In Visual Studio Code, settings allow you to customize various aspects of the editor to suit your workflow and preferences. These settings can be configured globally or at the workspace level, providing flexibility in how you manage your development environment. Accessing EDK2Code Extension Settings Open the Command Palette by pressing F1 or Ctrl + Shift + P. Type Preferences: Open Settings (UI) and select it. In the search bar at the top, type intel-corporation.edk2code to filter the settings specific to the EDK2Code extension. Browse through the filtered settings to customize the extension according to your preferences. Edk2Code Settings edk2code.logLevel Type : string Default : None Description : Debug log level Options : None Error Warning Info Verbose Debug edk2code.generateIgnoreFile Type : boolean Default : false Description : Generate .ignore file. This file reduces the scope of files consumed by VS Code commands such as search or open file . edk2code.delayToRefreshWorkspace Type : number Default : 5000 Description : Delay to refresh the EDK2 workspace after a file change, in milliseconds. edk2code.warningAboutCppExtension Type : boolean Default : true Description : Show warning about the need for the C++ extension. edk2code.enableDiagnostics Type : boolean Default : true Description : Experimental diagnostics for EDK2. It will show EDK2 errors in the VS Code Problem window. edk2code.useEdkCallHierarchy Type : boolean Default : true Description : Use EDK2 call hierarchy (cscope) instead of VS Code's native one. (Requires reload of VS Code after setup) edk2code.ExpandCircularOrDuplicateLibraries Type : boolean Default : false Description : Expand circular include or duplicated libraries in the Edk2 Map view. edk2code.cscopeOverwritePath Type : string Default : `` Description : Overwrites the path to the cscope executable. (Requires reload of VS Code after setup) edk2code.extraIgnorePatterns Type : array Default : *.log .ignore .gitignore .edkCode/**/* Description : Patterns to append to the .ignore file. Items : Type : string","title":"Settings"},{"location":"settings/#edk2code-settings","text":"In Visual Studio Code, settings allow you to customize various aspects of the editor to suit your workflow and preferences. These settings can be configured globally or at the workspace level, providing flexibility in how you manage your development environment.","title":"EDK2Code Settings"},{"location":"settings/#accessing-edk2code-extension-settings","text":"Open the Command Palette by pressing F1 or Ctrl + Shift + P. Type Preferences: Open Settings (UI) and select it. In the search bar at the top, type intel-corporation.edk2code to filter the settings specific to the EDK2Code extension. Browse through the filtered settings to customize the extension according to your preferences.","title":"Accessing EDK2Code Extension Settings"},{"location":"settings/#edk2code-settings_1","text":"","title":"Edk2Code Settings"},{"location":"settings/#edk2codeloglevel","text":"Type : string Default : None Description : Debug log level Options : None Error Warning Info Verbose Debug","title":"edk2code.logLevel"},{"location":"settings/#edk2codegenerateignorefile","text":"Type : boolean Default : false Description : Generate .ignore file. This file reduces the scope of files consumed by VS Code commands such as search or open file .","title":"edk2code.generateIgnoreFile"},{"location":"settings/#edk2codedelaytorefreshworkspace","text":"Type : number Default : 5000 Description : Delay to refresh the EDK2 workspace after a file change, in milliseconds.","title":"edk2code.delayToRefreshWorkspace"},{"location":"settings/#edk2codewarningaboutcppextension","text":"Type : boolean Default : true Description : Show warning about the need for the C++ extension.","title":"edk2code.warningAboutCppExtension"},{"location":"settings/#edk2codeenablediagnostics","text":"Type : boolean Default : true Description : Experimental diagnostics for EDK2. It will show EDK2 errors in the VS Code Problem window.","title":"edk2code.enableDiagnostics"},{"location":"settings/#edk2codeuseedkcallhierarchy","text":"Type : boolean Default : true Description : Use EDK2 call hierarchy (cscope) instead of VS Code's native one. (Requires reload of VS Code after setup)","title":"edk2code.useEdkCallHierarchy"},{"location":"settings/#edk2codeexpandcircularorduplicatelibraries","text":"Type : boolean Default : false Description : Expand circular include or duplicated libraries in the Edk2 Map view.","title":"edk2code.ExpandCircularOrDuplicateLibraries"},{"location":"settings/#edk2codecscopeoverwritepath","text":"Type : string Default : `` Description : Overwrites the path to the cscope executable. (Requires reload of VS Code after setup)","title":"edk2code.cscopeOverwritePath"},{"location":"settings/#edk2codeextraignorepatterns","text":"Type : array Default : *.log .ignore .gitignore .edkCode/**/* Description : Patterns to append to the .ignore file. Items : Type : string","title":"edk2code.extraIgnorePatterns"},{"location":"troubleshooting/","text":"Troubleshooting Common Issues Debugging the Extension Getting Help","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#common-issues","text":"","title":"Common Issues"},{"location":"troubleshooting/#debugging-the-extension","text":"","title":"Debugging the Extension"},{"location":"troubleshooting/#getting-help","text":"","title":"Getting Help"}]}