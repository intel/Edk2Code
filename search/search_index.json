{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EDK2Code The EDK2Code Extension is a Visual Studio Code extension designed to improve the development experience for engineers working with the EDK2 (UEFI) codebase. This extension provides support for syntax highlighting, code navigation, and error detection for the EDK2 language. By integrating these features directly into Visual Studio Code, developers can streamline their workflow and enhance productivity. Check YouTube video presentation on UEFIForum Channel","title":"EDK2Code"},{"location":"#edk2code","text":"The EDK2Code Extension is a Visual Studio Code extension designed to improve the development experience for engineers working with the EDK2 (UEFI) codebase. This extension provides support for syntax highlighting, code navigation, and error detection for the EDK2 language. By integrating these features directly into Visual Studio Code, developers can streamline their workflow and enhance productivity. Check YouTube video presentation on UEFIForum Channel","title":"EDK2Code"},{"location":"Index-source-code/","text":"Quick start Most of the extension functionality will work out of the box on any given EDK2 project. However it will have the full set of features enabled when the source code its compiled and the Index database is loaded. Rebuild Index Database Once you source code its compiled you create your workspace index with the following command from the command palette : > EDK2: Rebuild index database Vscode will ask you to select your build directory. After that it will detect the compilations inside your build directory, you can chose a single or multiple compilations to be loaded in your index: Enable compile information You can use the compile information build feature from EDK2 to provide more build information to the extension. This is optional but recommended To enable the compile information you need to enable the build report flag in the EDK2 build command and set -Y COMPILE_INFO . You can check more information about EDK build process here For example, if you want to build EmulatorPkg from EDK2 source, your build command will look like this: build -p EmulatorPkg\\EmulatorPkg.dsc -t VS2019 -a IA32 -Y COMPILE_INFO -y BuildReport.log This will generate compile information in your build folder. -Y COMPILE_INFO -y BuildReport.log will add to your build folder the CompileInfo folder: x:\\Edk2\\Build\\EmulatorIA32\\DEBUG_VS2019\\CompileInfo Files produced after parsing After parsing is completed, some files will be created in .edkCode folder on your workspace. .ignore This is a list of all your the files in your source that were not used during compilation. The generation of this file can be disabled in the extension settings. This file is used by VSCODE to ignore unused files. You can toggle the use of .ignore file in search: compile_commands.json This is the compilation database generated during build process. You can setup your C/C++ VSCODE plugging to use this compilation database to get better C parsing. To setup compile commands in your workspace, open C/C++: edit configurations (UI) in command palette. Under Advance Settings look for Compile commands property. Set the path for ${workspaceFolder}\\.edkCode\\compile_commands.json as shown in the following image: The EDK2Code extension will detect if compile_commands.json exists and will prompt the user to update the configuration cscope.files This is the list of all your files used in compilation. This file is used by Cscope to help provide C definitions.","title":"Quick start"},{"location":"Index-source-code/#quick-start","text":"Most of the extension functionality will work out of the box on any given EDK2 project. However it will have the full set of features enabled when the source code its compiled and the Index database is loaded.","title":"Quick start"},{"location":"Index-source-code/#rebuild-index-database","text":"Once you source code its compiled you create your workspace index with the following command from the command palette : > EDK2: Rebuild index database Vscode will ask you to select your build directory. After that it will detect the compilations inside your build directory, you can chose a single or multiple compilations to be loaded in your index:","title":"Rebuild Index Database"},{"location":"Index-source-code/#enable-compile-information","text":"You can use the compile information build feature from EDK2 to provide more build information to the extension. This is optional but recommended To enable the compile information you need to enable the build report flag in the EDK2 build command and set -Y COMPILE_INFO . You can check more information about EDK build process here For example, if you want to build EmulatorPkg from EDK2 source, your build command will look like this: build -p EmulatorPkg\\EmulatorPkg.dsc -t VS2019 -a IA32 -Y COMPILE_INFO -y BuildReport.log This will generate compile information in your build folder. -Y COMPILE_INFO -y BuildReport.log will add to your build folder the CompileInfo folder: x:\\Edk2\\Build\\EmulatorIA32\\DEBUG_VS2019\\CompileInfo","title":"Enable compile information"},{"location":"Index-source-code/#files-produced-after-parsing","text":"After parsing is completed, some files will be created in .edkCode folder on your workspace.","title":"Files produced after parsing"},{"location":"Index-source-code/#ignore","text":"This is a list of all your the files in your source that were not used during compilation. The generation of this file can be disabled in the extension settings. This file is used by VSCODE to ignore unused files. You can toggle the use of .ignore file in search:","title":".ignore"},{"location":"Index-source-code/#compile_commandsjson","text":"This is the compilation database generated during build process. You can setup your C/C++ VSCODE plugging to use this compilation database to get better C parsing. To setup compile commands in your workspace, open C/C++: edit configurations (UI) in command palette. Under Advance Settings look for Compile commands property. Set the path for ${workspaceFolder}\\.edkCode\\compile_commands.json as shown in the following image: The EDK2Code extension will detect if compile_commands.json exists and will prompt the user to update the configuration","title":"compile_commands.json"},{"location":"Index-source-code/#cscopefiles","text":"This is the list of all your files used in compilation. This file is used by Cscope to help provide C definitions.","title":"cscope.files"},{"location":"Settings/","text":"List of global settings Edk2code: Log Level Used to debug the extension development. Its recommended to keep on None unless you are debugging the Edk2Code extension. Edk2code: Generate Ignore File Generates .ignore file as part of source index process","title":"List of global settings"},{"location":"Settings/#list-of-global-settings","text":"","title":"List of global settings"},{"location":"Settings/#edk2code-log-level","text":"Used to debug the extension development. Its recommended to keep on None unless you are debugging the Edk2Code extension.","title":"Edk2code: Log Level"},{"location":"Settings/#edk2code-generate-ignore-file","text":"Generates .ignore file as part of source index process","title":"Edk2code: Generate Ignore File"},{"location":"Workspace-settings/","text":"Once you have created your workspace index You will see a .edkCode folder in your workspace. This colder contains edk2_workspace_properties.json file with the configuration used to generate the index. You can modify this file using one of the following commands: * EDK2: Workspace configuration (UI) * EDK2: Workspace configuration (JSON) { \"packagePaths\": [], \"dscPaths\": [ \"OvmfPkg\\\\OvmfPkgX64.dsc\" ], \"buildDefines\": [ \"ARCH=X64\" ] } dscPaths Each entry should be the main DSC files use for compilation. buildDefines These entries are definitions injected in your build command with -D . You can add or modify this list accoording to your needs. after modification of this file, you will see a message in vscode asking to reload your index. You can also modify this file using","title":"Workspace settings"},{"location":"requirements/","text":"Requirements Visual Studio Code ^1.77.0 Cscope Cscope is used for some C related functionality of the extension. On windows systems the cscope comes already included in the extension. For linux systems you need to install cscope manually. Ubuntu installation example: sudo apt install cscope Additionally, you can use the vscode setting edk2code.cscopeOverwritePath to point cscope to your preferred installation path.","title":"Requirements"},{"location":"requirements/#requirements","text":"","title":"Requirements"},{"location":"requirements/#visual-studio-code-1770","text":"","title":"Visual Studio Code ^1.77.0"},{"location":"requirements/#cscope","text":"Cscope is used for some C related functionality of the extension. On windows systems the cscope comes already included in the extension. For linux systems you need to install cscope manually. Ubuntu installation example: sudo apt install cscope Additionally, you can use the vscode setting edk2code.cscopeOverwritePath to point cscope to your preferred installation path.","title":"Cscope"},{"location":"documentation/documentation/","text":"Documentation Before you start testing the functionality of the extension, please index source code . Configuration You can check your workspace configuration with command: > EDK2: Workspace configuration (UI) This configuration will be automatically populated after you indexed your source code . DSC relative path Are the main DSC files for your workspace Build Defines Build defines that were injected in your EDK2 build command Package paths are the paths set for the EDK2 Build command. You can manually change this configuration. After any manual modification the user will be prompted to rescan the Index. Interface Status bar When you open a file in the editor, you will see in the status bar a warning if the file you are looking has been compiled or not: The following commands are expected to work only on files that have been used in compilation. Global commands This commands are only accessible using the command palette (\u2328F1) EDK2: Open library Will show a list of all the libraries compiled. EDK2: Open Module Will show a list of all the modules compiled. EDK2: Rebuild index database This will clean up the current source index and will create a new one. See . EDK2: Rescan index database This will use the previous index configuration and will recreate the index without changing the workspace settings EDK2 language support After you source code has been indexed you will see some of the features of using Edk2Code extension \u26a0 IMPORTANT Before continuing please index your code following this instructions INF files Inf files will show syntax highlight: Outline tree Source goto definition Right click on a source file name and then select Go To Definition (F12) This will open the source file selected. This also works for LibraryClasses , Pcd and Packages : The results shown are based on your DSC parsing. LibraryClasses Auto completion Start typing on the LibraryClasses section will show suggestions of libraries that can be included in that INF file: This suggestions are based on DEC files in Packages section. Goto DSC Declaration Right click on an anywhere in an INF file and select EDK2: Goto DSC Declaration This will open the DSC file where this INF file was declared. Library usage If the INF file is a library, right click and select EDK2: Show Library usage : This will show what modules are using your library: DSC Files Syntax highlight See Outline See Variable defines resolution DSC files will dim source that hasn't been compiled based on DEFINES. You can see the value of the defines if you hover your mouse over. This also works with PCD values Goto Definition Right click on a file path and select Go to Definition (F12) to open that file. Goto DSC inclusion Right click and select Go to DSC Inclusion to see if this DSC file was included ( !Include ) in other DSC file. DEC Syntax highlight See Outline See C files Call Hierarchy Right on a function name and select Show Call Hierarchy : This will open the References view with the call Hierarchy of the selected function. Edk2Code extension will filter unused calls from the view. Go to INF When you are on a C file, Right click and select Go to INF : This will open the .inf file that compiled that C file. Go to Definition Right click on a C symbol (function, variable, etc) and select EDK2: Go To Definition to open the symbol definition. This differs from regular Go to Definition command provided by VSCODE as this will uses CSCOPE and compiled files to query the definitions. Sometimes it gives better results. VFR Syntax highlight See Outline See ACPI Syntax highlight See Outline See Help Hover on keywords of your ASL code and you will see help extracted from ACPI specification (6.3) Auto complete Start typing anywhere in your *.asl files and you will see autocomplete suggestions of ASL specification.","title":"Documentation"},{"location":"documentation/documentation/#documentation","text":"Before you start testing the functionality of the extension, please index source code .","title":"Documentation"},{"location":"documentation/documentation/#configuration","text":"You can check your workspace configuration with command: > EDK2: Workspace configuration (UI) This configuration will be automatically populated after you indexed your source code . DSC relative path Are the main DSC files for your workspace Build Defines Build defines that were injected in your EDK2 build command Package paths are the paths set for the EDK2 Build command. You can manually change this configuration. After any manual modification the user will be prompted to rescan the Index.","title":"Configuration"},{"location":"documentation/documentation/#interface","text":"","title":"Interface"},{"location":"documentation/documentation/#status-bar","text":"When you open a file in the editor, you will see in the status bar a warning if the file you are looking has been compiled or not: The following commands are expected to work only on files that have been used in compilation.","title":"Status bar"},{"location":"documentation/documentation/#global-commands","text":"This commands are only accessible using the command palette (\u2328F1)","title":"Global commands"},{"location":"documentation/documentation/#edk2-open-library","text":"Will show a list of all the libraries compiled.","title":"EDK2: Open library"},{"location":"documentation/documentation/#edk2-open-module","text":"Will show a list of all the modules compiled.","title":"EDK2: Open Module"},{"location":"documentation/documentation/#edk2-rebuild-index-database","text":"This will clean up the current source index and will create a new one. See .","title":"EDK2: Rebuild index database"},{"location":"documentation/documentation/#edk2-rescan-index-database","text":"This will use the previous index configuration and will recreate the index without changing the workspace settings","title":"EDK2: Rescan index database"},{"location":"documentation/documentation/#edk2-language-support","text":"After you source code has been indexed you will see some of the features of using Edk2Code extension \u26a0 IMPORTANT Before continuing please index your code following this instructions","title":"EDK2 language support"},{"location":"documentation/documentation/#inf-files","text":"","title":"INF files"},{"location":"documentation/documentation/#inf-files-will-show-syntax-highlight","text":"","title":"Inf files will show syntax highlight:"},{"location":"documentation/documentation/#outline-tree","text":"","title":"Outline tree"},{"location":"documentation/documentation/#source-goto-definition","text":"Right click on a source file name and then select Go To Definition (F12) This will open the source file selected. This also works for LibraryClasses , Pcd and Packages : The results shown are based on your DSC parsing.","title":"Source goto definition"},{"location":"documentation/documentation/#libraryclasses-auto-completion","text":"Start typing on the LibraryClasses section will show suggestions of libraries that can be included in that INF file: This suggestions are based on DEC files in Packages section.","title":"LibraryClasses Auto completion"},{"location":"documentation/documentation/#goto-dsc-declaration","text":"Right click on an anywhere in an INF file and select EDK2: Goto DSC Declaration This will open the DSC file where this INF file was declared.","title":"Goto DSC Declaration"},{"location":"documentation/documentation/#library-usage","text":"If the INF file is a library, right click and select EDK2: Show Library usage : This will show what modules are using your library:","title":"Library usage"},{"location":"documentation/documentation/#dsc-files","text":"","title":"DSC Files"},{"location":"documentation/documentation/#syntax-highlight","text":"See","title":"Syntax highlight"},{"location":"documentation/documentation/#outline","text":"See","title":"Outline"},{"location":"documentation/documentation/#variable-defines-resolution","text":"DSC files will dim source that hasn't been compiled based on DEFINES. You can see the value of the defines if you hover your mouse over. This also works with PCD values","title":"Variable defines resolution"},{"location":"documentation/documentation/#goto-definition","text":"Right click on a file path and select Go to Definition (F12) to open that file.","title":"Goto Definition"},{"location":"documentation/documentation/#goto-dsc-inclusion","text":"Right click and select Go to DSC Inclusion to see if this DSC file was included ( !Include ) in other DSC file.","title":"Goto DSC inclusion"},{"location":"documentation/documentation/#dec","text":"","title":"DEC"},{"location":"documentation/documentation/#syntax-highlight_1","text":"See","title":"Syntax highlight"},{"location":"documentation/documentation/#outline_1","text":"See","title":"Outline"},{"location":"documentation/documentation/#c-files","text":"","title":"C files"},{"location":"documentation/documentation/#call-hierarchy","text":"Right on a function name and select Show Call Hierarchy : This will open the References view with the call Hierarchy of the selected function. Edk2Code extension will filter unused calls from the view.","title":"Call Hierarchy"},{"location":"documentation/documentation/#go-to-inf","text":"When you are on a C file, Right click and select Go to INF : This will open the .inf file that compiled that C file.","title":"Go to INF"},{"location":"documentation/documentation/#go-to-definition","text":"Right click on a C symbol (function, variable, etc) and select EDK2: Go To Definition to open the symbol definition. This differs from regular Go to Definition command provided by VSCODE as this will uses CSCOPE and compiled files to query the definitions. Sometimes it gives better results.","title":"Go to Definition"},{"location":"documentation/documentation/#vfr","text":"","title":"VFR"},{"location":"documentation/documentation/#syntax-highlight_2","text":"See","title":"Syntax highlight"},{"location":"documentation/documentation/#outline_2","text":"See","title":"Outline"},{"location":"documentation/documentation/#acpi","text":"","title":"ACPI"},{"location":"documentation/documentation/#syntax-highlight_3","text":"See","title":"Syntax highlight"},{"location":"documentation/documentation/#outline_3","text":"See","title":"Outline"},{"location":"documentation/documentation/#help","text":"Hover on keywords of your ASL code and you will see help extracted from ACPI specification (6.3)","title":"Help"},{"location":"documentation/documentation/#auto-complete","text":"Start typing anywhere in your *.asl files and you will see autocomplete suggestions of ASL specification.","title":"Auto complete"},{"location":"releases/1.0.9/","text":"1.0.9 DSC analisys Shows problems in DSC files Module map Added context menu action Show Module Map . This action is available on INF files and will open EDK2 module map side panel to show: - Library tree - Source files tree (including Header files) You can also copy the path of the element selected in EDK2 module map using mouse context menu.","title":"1.0.9"},{"location":"releases/1.0.9/#109","text":"","title":"1.0.9"},{"location":"releases/1.0.9/#dsc-analisys","text":"Shows problems in DSC files","title":"DSC analisys"},{"location":"releases/1.0.9/#module-map","text":"Added context menu action Show Module Map . This action is available on INF files and will open EDK2 module map side panel to show: - Library tree - Source files tree (including Header files) You can also copy the path of the element selected in EDK2 module map using mouse context menu.","title":"Module map"}]}